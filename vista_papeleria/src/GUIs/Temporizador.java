package GUIs;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import javax.swing.*;


public class Temporizador extends javax.swing.JFrame {
    
    private Timer temporizador;
    private DefaultTableModel tableModel;
    private static String rutaArchivo;
    
    public Temporizador() {
        initComponents();
        tableModel = new DefaultTableModel();
        tableModel.addColumn("Nombre");
        tableModel.addColumn("Horas");
        tableModel.addColumn("Minutos");
        // Asignar el modelo a la JTable
        jTableTiempo.setModel(tableModel);
        cargarTablaDesdeArchivo(rutaArchivo);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tblVenta2 = new javax.swing.JPanel();
        lblGeneral2 = new javax.swing.JLabel();
        lblCliente3 = new javax.swing.JLabel();
        txtNombre = new javax.swing.JTextField();
        lblCliente10 = new javax.swing.JLabel();
        btnQuitar = new javax.swing.JButton();
        btnAgregar = new javax.swing.JButton();
        lblRectangulo4 = new javax.swing.JLabel();
        btnCancelar = new javax.swing.JButton();
        jComboBoxMin = new javax.swing.JComboBox<>();
        lblCliente11 = new javax.swing.JLabel();
        jComboBoxHoras = new javax.swing.JComboBox<>();
        lblRectangulo5 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTableTiempo = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        tblVenta2.setBackground(new java.awt.Color(255, 255, 255));
        tblVenta2.setPreferredSize(new java.awt.Dimension(1000, 750));
        tblVenta2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lblGeneral2.setFont(new java.awt.Font("Segoe UI", 1, 16)); // NOI18N
        lblGeneral2.setForeground(new java.awt.Color(153, 153, 153));
        lblGeneral2.setText("Temporizador maquinas");
        tblVenta2.add(lblGeneral2, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 10, 280, -1));

        lblCliente3.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lblCliente3.setText("Nombre/Descripción:");
        tblVenta2.add(lblCliente3, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 100, -1, -1));

        txtNombre.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        tblVenta2.add(txtNombre, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 100, 370, -1));

        lblCliente10.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lblCliente10.setText("Minutos:");
        tblVenta2.add(lblCliente10, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 140, -1, -1));

        btnQuitar.setBackground(new java.awt.Color(0, 0, 255));
        btnQuitar.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        btnQuitar.setForeground(new java.awt.Color(255, 255, 255));
        btnQuitar.setText("Quitar Maquina");
        btnQuitar.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(204, 204, 255), new java.awt.Color(0, 153, 255), new java.awt.Color(204, 204, 255), java.awt.Color.white));
        btnQuitar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnQuitarActionPerformed(evt);
            }
        });
        tblVenta2.add(btnQuitar, new org.netbeans.lib.awtextra.AbsoluteConstraints(720, 150, 150, 30));

        btnAgregar.setBackground(new java.awt.Color(0, 0, 255));
        btnAgregar.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        btnAgregar.setForeground(new java.awt.Color(255, 255, 255));
        btnAgregar.setText("Agregar");
        btnAgregar.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(204, 204, 255), new java.awt.Color(0, 153, 255), new java.awt.Color(204, 204, 255), java.awt.Color.white));
        btnAgregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgregarActionPerformed(evt);
            }
        });
        tblVenta2.add(btnAgregar, new org.netbeans.lib.awtextra.AbsoluteConstraints(740, 100, 110, 30));

        lblRectangulo4.setBackground(new java.awt.Color(204, 204, 255));
        lblRectangulo4.setOpaque(true);
        tblVenta2.add(lblRectangulo4, new org.netbeans.lib.awtextra.AbsoluteConstraints(650, 40, 280, 190));

        btnCancelar.setBackground(new java.awt.Color(0, 51, 255));
        btnCancelar.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        btnCancelar.setForeground(new java.awt.Color(255, 255, 255));
        btnCancelar.setText("Volver Menu");
        btnCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarActionPerformed(evt);
            }
        });
        tblVenta2.add(btnCancelar, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 460, 180, 50));

        jComboBoxMin.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "0", "1", "11", "10", "20", "30", "40", "50", " " }));
        tblVenta2.add(jComboBoxMin, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 140, 90, 30));

        lblCliente11.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lblCliente11.setText("Horas:");
        tblVenta2.add(lblCliente11, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 140, -1, -1));

        jComboBoxHoras.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "0", "1", "2", "3", "4", "5" }));
        tblVenta2.add(jComboBoxHoras, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 140, 90, 30));

        lblRectangulo5.setBackground(new java.awt.Color(204, 204, 255));
        lblRectangulo5.setOpaque(true);
        tblVenta2.add(lblRectangulo5, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 40, 590, 190));

        jTableTiempo.setBackground(new java.awt.Color(204, 204, 255));
        jTableTiempo.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null}
            },
            new String [] {
                "Nombre", "Horas", "Minutos"
            }
        ));
        jScrollPane2.setViewportView(jTableTiempo);

        tblVenta2.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 240, 890, 190));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(tblVenta2, javax.swing.GroupLayout.DEFAULT_SIZE, 940, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(tblVenta2, javax.swing.GroupLayout.PREFERRED_SIZE, 553, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnQuitarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnQuitarActionPerformed
        int seleccion = jTableTiempo.getSelectedRow();
        DefaultTableModel model = (DefaultTableModel) jTableTiempo.getModel();

        if (seleccion != -1) { // Verificar si hay una fila seleccionada
            String nombre = (String) model.getValueAt(seleccion, 0); // Obtener el nombre de la fila seleccionada
            model.removeRow(seleccion); // Eliminar la fila seleccionada
            eliminarFilaPorNombre(jTableTiempo, nombre); // Llamar al método para eliminar la fila por nombre
        } else {
            JOptionPane.showMessageDialog(this, "Por favor, selecciona una fila para quitar.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnQuitarActionPerformed

    private void btnAgregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgregarActionPerformed
        DefaultTableModel model =(DefaultTableModel)jTableTiempo.getModel();
    String hr = jComboBoxHoras.getSelectedItem().toString();
    String min = jComboBoxMin.getSelectedItem().toString();
    model.addRow(new Object[]{txtNombre.getText(), hr, min});
    // Llamada a iniciarTemporizador, ya estás haciendo esto
    Temporizador.iniciarTemporizador(Integer.parseInt(hr), Integer.parseInt(min), txtNombre.getText(), jTableTiempo, Temporizador.this);
    // Llamada a guardarTablaEnArchivo para guardar la información
    Temporizador.guardarTablaEnArchivo(rutaArchivo, Temporizador.this);
    }//GEN-LAST:event_btnAgregarActionPerformed

    private void btnCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarActionPerformed
         int respuesta = JOptionPane.showConfirmDialog(this, "¿Está seguro de que desea volver al menu?", "Volver", JOptionPane.YES_NO_OPTION);
         if (respuesta == JOptionPane.YES_OPTION) {
         setVisible(false);
         PrincipalForm.getInstance().setVisible(true);
         }
    }//GEN-LAST:event_btnCancelarActionPerformed
   
   // Método para iniciar el temporizador con horas y minutos como entrada
    public static void iniciarTemporizador(int horas, int minutos, String nombre, JTable tabla, Temporizador temporizadorFrame) {
        // Calcular el tiempo total en milisegundos
        long tiempoTotal = (horas * 60 * 60 * 1000) + (minutos * 60 * 1000);
        // Crear un temporizador con el tiempo total
        Timer temporizador = new Timer(1000, new ActionListener() {
            long tiempoRestante = tiempoTotal;

            @Override
            public void actionPerformed(ActionEvent e) {
                guardarTablaEnArchivo(rutaArchivo, temporizadorFrame);
                // Actualiza la tabla
                actualizarInformacion(tabla, nombre, tiempoRestante);
                // Verifica si algún usuario fue eliminado
                tiempoRestante = verificarTabla(nombre, tabla, tiempoRestante);
                // Reducir el tiempo restante en cada iteración
                tiempoRestante -= 1000;
                // Guardar la información en el archivo de texto
                guardarTablaEnArchivo(rutaArchivo, temporizadorFrame);
                System.out.println("tiempoRestante :" + tiempoRestante);
                if (tiempoRestante == 599000) {
                    JOptionPane.showMessageDialog(temporizadorFrame.getRootPane(),
                            "Le quedan menos de 10 minutos a: " + nombre);
                }
                // Verificar si el temporizador ha llegado a cero
                if (tiempoRestante <= 0) {
                    ((Timer) e.getSource()).stop(); // Detener el temporizador
                    eliminarFilaPorNombre(tabla, nombre); // Se elimina de la fila terminando el tiempo
                    eliminarArchivo(rutaArchivo, temporizadorFrame);
                    JOptionPane.showMessageDialog(temporizadorFrame.getRootPane(), "Se le acabo el tiempo a: " + nombre);
                    System.out.println("Temporizador finalizado");
                }
            }
        });
        // Iniciar el temporizador
        temporizador.start();
    }
    
    // Método para convertir milisegundos a horas y minutos
    private static String convertirMilisegundosAHM(long milisegundos) {
        long minutos = milisegundos / (60 * 1000);
        long horas = minutos / 60;
        minutos %= 60;
        return String.format("%02d:%02d", horas, minutos);
    }

    public static void actualizarInformacion(JTable tabla, String nombre, long tiempoRestante) {
    DefaultTableModel modelo = (DefaultTableModel) tabla.getModel();
    int columnaNombre = 0;
    int columnaHoras = 1;
    int columnaMinutos = 2;
    // Iterar a través de las filas
    for (int i = 0; i < modelo.getRowCount(); i++) {
        // Obtener el nombre en la columna correspondiente
        String nombreEnFila = (String) modelo.getValueAt(i, columnaNombre);
        // Comparar nombres
        if (nombreEnFila.equals(nombre)) {
            // Calcular las horas y minutos desde el tiempo restante
            int horas = (int) (tiempoRestante / 3600000); // 1 hora = 3600000 milisegundos
            int minutos = (int) ((tiempoRestante % 3600000) / 60000); // 1 minuto = 60000 milisegundos
            // Actualizar las horas y minutos en la fila
            modelo.setValueAt(horas, i, columnaHoras);
            modelo.setValueAt(minutos, i, columnaMinutos);
            //Actualizar el nombre para cargar la tabla AUN NO TERMINADO
            System.out.println("Temporizador: "+nombre+", Horas: "+horas+", Minutos: "+minutos);
            modelo.setValueAt(nombreEnFila, i, columnaNombre);
            break; // Terminar el bucle una vez que se actualice la información
        }
    }
}
        public static long verificarTabla(String Nombre, JTable tabla, long tiempoRestante) {
            DefaultTableModel modelo = (DefaultTableModel) tabla.getModel();
            int columnaNombre = 0;
            // Iterar a través de las filas
            for (int i = 0; i < modelo.getRowCount(); i++) {
                // Obtener el nombre en la columna correspondiente
                String nombreEnFila = (String) modelo.getValueAt(i, columnaNombre);
                // Comparar nombres
                if (nombreEnFila.equals(Nombre)) {
                    // Si encuentra el nombre, retorna el tiempo restante y termina la función
                    return tiempoRestante;
                }
            }
            // Si no encuentra el nombre en ninguna fila, retorna 0
            return 0;
        }

        
     
      public static void eliminarFilaPorNombre(JTable tabla, String nombreBuscado) {
        DefaultTableModel modelo = (DefaultTableModel) tabla.getModel();
        int columnaNombre = 0;
        // Iterar a través de las filas
        for (int i = 0; i < modelo.getRowCount(); i++) {
            // Obtener el nombre en la columna correspondiente
            String nombreEnFila = (String) modelo.getValueAt(i, columnaNombre);
            // Comparar nombres
            if (nombreEnFila.equals(nombreBuscado)) {
                // Eliminar la fila
                modelo.removeRow(i);
                System.out.println("Se eliminó la fila para '" + nombreBuscado + "'");
                // Realizar acciones adicionales si es necesario
                break; // Terminar el bucle una vez que se elimine la fila
            }
        }
    }
      
    // Método para guardar la información en el archivo
    public static void guardarTablaEnArchivo(String nombreArchivo, Temporizador temporizadorInstance) {
        try (PrintWriter writer = new PrintWriter(new FileWriter(nombreArchivo))) {
            DefaultTableModel modelo = (DefaultTableModel) temporizadorInstance.jTableTiempo.getModel();
            for (int i = 0; i < modelo.getRowCount(); i++) {
                String nombre = (String) modelo.getValueAt(i, 0);
                int horas = Integer.parseInt(modelo.getValueAt(i, 1).toString());
                int minutos = Integer.parseInt(modelo.getValueAt(i, 2).toString());
                writer.println(nombre + "," + horas + "," + minutos);
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
      
   public void cargarTablaDesdeArchivo(String rutaArchivo) {
        File archivo = new File(rutaArchivo);
        // Verificar si el archivo existe
        if (archivo.exists()) {
            try (BufferedReader reader = new BufferedReader(new FileReader(archivo))) {
                DefaultTableModel modelo = (DefaultTableModel) jTableTiempo.getModel();
                String linea;
                while ((linea = reader.readLine()) != null) {
                    String[] datos = linea.split(",");
                    String nombre = datos[0];
                    int horas = Integer.parseInt(datos[1]);
                    int minutos = Integer.parseInt(datos[2]);
                    modelo.addRow(new Object[]{nombre, horas, minutos});
                    iniciarTemporizador(horas, minutos, nombre, jTableTiempo, this);
                }
            } catch (IOException e) {
                e.printStackTrace();
            }
        } else {
            // Si el archivo no existe, crear un archivo vacío
            try {
                archivo.createNewFile();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }
   
   
   public static void eliminarArchivo(String nombreArchivo,Temporizador temporizadorInstance) {
    try (PrintWriter writer = new PrintWriter(new FileWriter(nombreArchivo))) {
            DefaultTableModel modelo = (DefaultTableModel) temporizadorInstance.jTableTiempo.getModel();
            
            for (int i = 0; i < modelo.getRowCount(); i++) {
                String nombre = (String) modelo.getValueAt(i, 0);
                int horas = 0;
                int minutos = 0;
                writer.println(nombre + "," + horas + "," + minutos);
                System.out.println("Archivo eliminado: " + nombreArchivo);
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
}

   public static String obtenerRutaDocumento(String nombreArchivo) {
    String carpetaDocumentos = System.getProperty("user.home") + File.separator + "Documents";
    return carpetaDocumentos + File.separator + nombreArchivo;
}
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAgregar;
    private javax.swing.JButton btnCancelar;
    private javax.swing.JButton btnQuitar;
    private javax.swing.JComboBox<String> jComboBoxHoras;
    private javax.swing.JComboBox<String> jComboBoxMin;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTableTiempo;
    private javax.swing.JLabel lblCliente10;
    private javax.swing.JLabel lblCliente11;
    private javax.swing.JLabel lblCliente3;
    private javax.swing.JLabel lblGeneral2;
    private javax.swing.JLabel lblRectangulo4;
    private javax.swing.JLabel lblRectangulo5;
    private javax.swing.JPanel tblVenta2;
    private javax.swing.JTextField txtNombre;
    // End of variables declaration//GEN-END:variables
}
